{"ast":null,"code":"import * as d3 from \"d3\";\nexport default {\n  name: 'MinecraftPage',\n\n  data() {\n    return {\n      data: []\n    };\n  },\n\n  mounted() {\n    this.getData();\n  },\n\n  methods: {\n    getData() {\n      Promise.all([d3.csv(`data/minecraft.csv`, function (d) {\n        return {\n          x: +d[\"x\"],\n          y: +d[\"y\"],\n          name: d[\"name\"]\n        };\n      })]).then(response => {\n        console.log(response[0]);\n        this.data = response[0];\n        this.renderMap();\n      });\n    },\n\n    renderMap() {\n      console.log(\"rendering map\");\n      const width = d3.select(`#map`).node().getBoundingClientRect().width;\n      const height = width; //  const height = d3.select(`#map`).node().getBoundingClientRect().height;\n\n      const innerWidth = width - 100;\n      const innerHeight = height - 100;\n      let xscale = d3.scaleLinear().domain([-2000, 2000]).range([0, innerWidth]);\n      let yscale = d3.scaleLinear().domain([-2000, 2000]).range([innerHeight, 0]); // Init Svg\n\n      const container = d3.select(`#map`).append('svg').attr('width', width).attr('height', height).attr('id', `map-svg`).append('g').attr('transform', `translate(50,50)`).attr(\"id\", `map-g`);\n      let tickPadding = 2.5;\n      const y = d3.axisLeft(yscale).ticks(50).tickPadding(tickPadding);\n      container.append(\"g\").attr(\"class\", \"axis y\").attr(\"transform\", `translate(0,0)`).call(y);\n      const x = d3.axisBottom().scale(xscale).ticks(50);\n      container.append(\"g\").attr(\"class\", \"axis x\").attr(\"transform\", `translate(0,${innerHeight})`).call(x);\n      container.selectAll(\".axis.y .tick line\").attr(\"x1\", innerWidth);\n      container.selectAll(\".axis.x .tick line\").attr(\"y1\", -innerHeight);\n      let scatterPt = container.selectAll(\".scatter-pt\").data(this.data);\n      scatterPt.exit().remove();\n      scatterPt.enter().append(\"g\").merge(scatterPt).attr(\"class\", \"scatter-pt\").attr(\"transform\", d => `translate(${xscale(d.x)}, ${yscale(d.y)})`).each(function (d) {\n        d3.select(this).append(\"circle\").attr(\"r\", 5).attr(\"fill\", \"white\").attr(\"fill-opacity\", .5);\n        d3.select(this).append(\"text\").attr(\"x\", 10).attr(\"y\", 5).text(d.name).attr(\"fill\", \"white\");\n      });\n    }\n\n  },\n  watch: {}\n};","map":{"version":3,"mappings":"AAOA;AAEA;EACAA,qBADA;;EAEAC;IACA;MACAA;IADA;EAGA,CANA;;EAOAC;IACA;EACA,CATA;;EAUAC;IACAC;MAEAC,aACAC;QACA;UACAC,UADA;UAEAC,UAFA;UAGAR;QAHA;MAKA,CANA,CADA,GAQAS,IARA,CAQAC;QACAC;QACA;QACA;MACA,CAZA;IAaA,CAhBA;;IAiBAC;MACAD;MAEA;MACA,qBAJA,CAKA;;MACA;MACA;MACA;MACA,4EATA,CAWA;;MACA,kDACAE,IADA,CACA,OADA,EACAC,KADA,EAEAD,IAFA,CAEA,QAFA,EAEAE,MAFA,EAGAF,IAHA,CAGA,IAHA,EAGA,SAHA,EAIAG,MAJA,CAIA,GAJA,EAKAH,IALA,CAKA,WALA,EAKA,kBALA,EAMAA,IANA,CAMA,IANA,EAMA,OANA;MAUA;MAEA,8BACAI,KADA,CACA,EADA,EAEAC,WAFA,CAEAA,WAFA;MAKAC,sBACAN,IADA,CACA,OADA,EACA,QADA,EAEAA,IAFA,CAEA,WAFA,EAEA,gBAFA,EAGAO,IAHA,CAGAZ,CAHA;MAKA,0BACAa,KADA,CACAC,MADA,EAEAL,KAFA,CAEA,EAFA;MAKAE,sBACAN,IADA,CACA,OADA,EACA,QADA,EAEAA,IAFA,CAEA,WAFA,EAEA,6BAFA,EAGAO,IAHA,CAGAb,CAHA;MAIAY;MACAA;MAGA,mDACAlB,IADA,CACA,SADA;MAGAsB;MACAA,UACAC,KADA,GAEAR,MAFA,CAEA,GAFA,EAGAS,KAHA,CAGAF,SAHA,EAIAV,IAJA,CAIA,OAJA,EAIA,YAJA,EAKAA,IALA,CAKA,WALA,EAKAa,gDALA,EAMAC,IANA,CAMA;QACArB,iCACAO,IADA,CACA,GADA,EACA,CADA,EAEAA,IAFA,CAEA,MAFA,EAEA,OAFA,EAGAA,IAHA,CAGA,cAHA,EAGA,EAHA;QAKAP,+BACAO,IADA,CACA,GADA,EACA,EADA,EAEAA,IAFA,CAEA,GAFA,EAEA,CAFA,EAGAe,IAHA,CAGAF,MAHA,EAIAb,IAJA,CAIA,MAJA,EAIA,OAJA;MAKA,CAjBA;IAoBA;;EAxFA,CAVA;EAoGAgB;AApGA","names":["name","data","mounted","methods","getData","Promise","d3","x","y","then","response","console","renderMap","attr","width","height","append","ticks","tickPadding","container","call","scale","xscale","scatterPt","enter","merge","d","each","text","watch"],"sourceRoot":"src/pages","sources":["MinecraftPage.vue"],"sourcesContent":["<template>\n    <v-container class=\"px-8\">\n    <h1>Minecraft Map</h1>\n    <div id=\"map\"></div>\n    </v-container>\n</template>\n<script>\n  import * as d3 from \"d3\";\n\nexport default {\n  name: 'MinecraftPage',\n      data () {\n        return {\n        data: []\n        }\n      },\n      mounted(){\n        this.getData()\n      },\n      methods: {\n         getData() {\n\n          Promise.all([\n              d3.csv(`data/minecraft.csv`, function(d){\n                  return {\n                    x: +d[\"x\"],\n                    y: +d[\"y\"],\n                    name: d[\"name\"]\n                  }\n              })\n            ]).then(response=>{\nconsole.log(response[0])\n                this.data = response[0]\n                this.renderMap()\n          })\n        },\n        renderMap(){\n            console.log(\"rendering map\")\n          \n            const width = d3.select(`#map`).node().getBoundingClientRect().width;\n            const height = width\n          //  const height = d3.select(`#map`).node().getBoundingClientRect().height;\n            const innerWidth = width - 100;\n            const innerHeight = height - 100;\n            let xscale = d3.scaleLinear().domain([-2000,2000]).range([0,innerWidth])\n            let yscale = d3.scaleLinear().domain([-2000,2000]).range([innerHeight, 0])\n\n        // Init Svg\n        const container = d3.select(`#map`).append('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .attr('id', `map-svg`)\n        .append('g')\n        .attr('transform', `translate(50,50)`)\n        .attr(\"id\", `map-g`)\n\n\n\n     let tickPadding = 2.5;\n\nconst y = d3.axisLeft(yscale) \n.ticks(50)\n.tickPadding(tickPadding)\n\n\ncontainer.append(\"g\")\n.attr(\"class\", \"axis y\")\n.attr(\"transform\", `translate(0,0)`)\n.call(y)\n\nconst x = d3.axisBottom()\n.scale(xscale)   \n.ticks(50)\n\n\ncontainer.append(\"g\")\n.attr(\"class\", \"axis x\")\n.attr(\"transform\", `translate(0,${innerHeight})`)\n.call(x)\ncontainer.selectAll(\".axis.y .tick line\").attr(\"x1\", innerWidth);\ncontainer.selectAll(\".axis.x .tick line\").attr(\"y1\", -innerHeight);\n\n\n        let scatterPt = container.selectAll(\".scatter-pt\")\n        .data(this.data)\n\n        scatterPt.exit().remove()\n        scatterPt\n            .enter()\n            .append(\"g\")\n            .merge(scatterPt)\n            .attr(\"class\", \"scatter-pt\")\n            .attr(\"transform\", d=> `translate(${ xscale(d.x)}, ${ yscale(d.y)})`)\n            .each(function(d){\n                d3.select(this).append(\"circle\")\n                .attr(\"r\", 5)\n                .attr(\"fill\", \"white\")\n                .attr(\"fill-opacity\", .5)\n\n                d3.select(this).append(\"text\")\n                .attr(\"x\", 10)\n                .attr(\"y\", 5)\n                .text(d.name)\n                .attr(\"fill\", \"white\")\n            })\n        \n            \n        } \n      },\n      watch: {\n\n      }\n    }\n\n\n</script>\n<style>\n.tick line{\n    stroke: white;\n    opacity: .25;\n}\n.tick text{\n    fill: white;\n    font-size: 8px;\n}\n    h1{\n        text-align:center;\n    }\n    #map{\n        width:100%;\n    }\n</style>\n"]},"metadata":{},"sourceType":"module"}